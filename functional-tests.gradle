sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test

    reports {
        html.destination = project.file("$html.destination/functional")
        junitXml.destination = project.file("$junitXml.destination/functional")
    }
}

check.dependsOn functionalTest

idea.module {
    sourceSets.test.allSource.srcDirs.each {
        testSourceDirs += it
    }

    scopes.TEST.plus += [configurations.testCompile]
    scopes.TEST.plus += [configurations.testRuntime]
}

gradlePlugin {
    testSourceSets sourceSets.functionalTest
}

dependencies {
    functionalTestCompile gradleTestKit()

    functionalTestCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    functionalTestCompile 'com.netflix.nebula:nebula-test:4.0.0'
}